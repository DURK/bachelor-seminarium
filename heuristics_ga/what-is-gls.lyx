#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
Genetic Hybrid Algorithms
\end_layout

\begin_layout Standard
Genetic hybrid algorithms take multiple heuristic algorithms and combine
 them for better performance.
 As explained in Section 2.2, genetic algorithms converge slowly towards
 the optimal solution.
 It is possible to speed up this process by improving each chromosome.
 This allows faster convergence, while maintaining a widely covered search
 space.
 --As an example local search is picked combination with a genetic algorithm,
 making it a hybrid algorithm.
 After the explanation of local search, genetic local search is taken to
 demonstrate a genetic algorithm with local search.--
\end_layout

\begin_layout Subsubsection
Local Search
\end_layout

\begin_layout Standard
Local search is a meta-heuristic method to find the optimal solution.
 Local search doesn't guarantee that the optimal solution will be found,
 this will be explained later.
 The A meta-heuristic is a combination of multiple heuristics, creating
 a multi-dimensional search space.
 Local search starts with a candidate solution, which is given or picked
 at random.
 The candidate solution is then compared to its neighbourhood, searching
 for a better solution in each dimension of the search space.
 The evaluation of a neighbourhood is done by the fitness function.
 From here there are two options: the 'best improvement' and the 'first
 improvement'.
 The best improvement selects the best solution in its entire neighbourhood,
 while the first improvement selects the first solution that is better than
 the current candidate solution.
 Because the best improvement searches the whole neighbourhood it converges
 slowly, while the first improvement is the other way around.
 This is illustrated in Table 1.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Search space coverage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Convergence
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Best improvement
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Small
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fast
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
First improvement
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wide
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Slow
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Comparison best- and first improvement 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
When local search finds this, or a better, solution it sets this as new
 candidate solution.
 The algorithm will terminate if a better solution in this neighbourhood
 doesn't exists.
 Termination can also take place if a certain amount of iterative steps
 has been taken or if the candidates fitness has reached a user specified
 value.
 
\end_layout

\begin_layout Paragraph
Example
\end_layout

\begin_layout Standard
Consider the following notions for the CLIQUE-problem.
\end_layout

\begin_layout Itemize
Set F contains all feasible solutions.
\end_layout

\begin_layout Itemize
Fitness function c: maps 
\begin_inset Formula $F\rightarrow\mathbb{R}$
\end_inset

, quantifying the fitness for each solution 
\begin_inset Formula $x\in F$
\end_inset

.
\end_layout

\begin_layout Itemize
Neighbourhood function: maps 
\begin_inset Formula $F\rightarrow2^{F}$
\end_inset

, defining for each solution 
\begin_inset Formula $x\in F$
\end_inset

 a neighborhood 
\begin_inset Formula $N(x)\subseteq F.$
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Adding or removing a node to the current selection of nodes to check if
 it forms a CLIQUE.
\end_layout

\end_deeper
\begin_layout Itemize
Improvement criterion: 
\end_layout

\begin_deeper
\begin_layout Itemize
Best improvement: Selecting 
\begin_inset Formula $y\in N(x)$
\end_inset

 which has the highest value of 
\begin_inset Formula $c(y)$
\end_inset

.
\end_layout

\begin_layout Itemize
First improvement: Selecting 
\begin_inset Formula $y$
\end_inset

 as next candidate when 
\begin_inset Formula $c(x)<c(y)$
\end_inset

.
 
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../jobshop/images/localsearch.pdf
	width 66text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Visualization of search space and fitness function
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The x-axis represents the set F containing all feasible solutions, the y-axis
 represents 
\begin_inset Formula $c(x)$
\end_inset

.
 As an example for the fitness function the blue dotted line is plotted.
 Note that this is a preferable fitness function, since there is a simple
 line towards the global maximum.
 Most fitness functions are looking more similar to 
\begin_inset Formula $g(x)$
\end_inset

, which makes it harder for the algorithm to find the optimal solution.
\end_layout

\begin_layout Standard
Now imagine that the algorithm starts at the local minimum marked with a
 
\begin_inset Formula $s$
\end_inset

.
 The grey area represents the neighbourhood of the candidate solution.
 The next iterative step will lead to a candidate solution in the direction
 of the local maximum on the right side, since the fitness value of the
 solution to its right is higher then the solution to the left side.
 This process continues until the candidate solution reaches this local
 maximum.
 Remember that local search will terminate here and returns the solution
 at this local maximum, but it is not the global maximum.
 This is avoidable with a genetic algorithm.
\end_layout

\begin_layout Subsubsection
Genetic Local Search
\end_layout

\begin_layout Standard
This subsection will focus on genetic algorithms that heavily rely on local
 search, a common form of hybrid genetic algorithms.
 Genetic algorithms are designed to be effective at global search, but converge
 slowly.
 Local search on the other hand is effective at fine-tuning but often falls
 into local maxima, as shown in Section 2.2.
 The hybrid approach combines the best of both worlds by combining genetic
 algorithms that perform global search to avoid falling into local maxima
 with local search that handles the fine-tuning
\begin_inset CommandInset citation
LatexCommand cite
key "cheng99"

\end_inset

.
 In this section, the general principles of combining genetic algorithms
 with local search are introduced first.
\end_layout

\begin_layout Standard
Typical genetic algorithms recombine parents, followed by mutation, in order
 to produce new chromosomes.
 Selection of chromosomes is based on their fitness.
 In standard genetic algorithms, this fitness can be calculated immediately
 after 'birth' by using a fitness function as shown in Section
\emph on
 2.2
\emph default
.
 In genetic algorithms combined with local search, selection is based on
 fitness after performing local search.
 This means offspring will be improved and these improvements will be passed
 on trough crossover.
 In essence, this causes offspring to 'learn', a principle called 
\emph on
local optimization
\emph default
.
 An example of pseudo code for such an optimization is shown in listing
 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Pseudocode-for-optimization-1"

\end_inset

 and illustrated in figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-recombination-,-local"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

begin
\end_layout

\begin_layout Plain Layout

  t=0
\end_layout

\begin_layout Plain Layout

  initialize P(t) 
\end_layout

\begin_layout Plain Layout

  localsearch to improve chromosomes  
\end_layout

\begin_layout Plain Layout

  evaluate P(t)	  
\end_layout

\begin_layout Plain Layout

  while (not termination condition) do
\end_layout

\begin_layout Plain Layout

    recombine P(t) by crossover and mutation	
\end_layout

\begin_layout Plain Layout

    localsearch to improve chromosomes		  
\end_layout

\begin_layout Plain Layout

    evaluate P(t)						 
\end_layout

\begin_layout Plain Layout

    select to new population P(t)				
\end_layout

\begin_layout Plain Layout

    t++										
\end_layout

\begin_layout Plain Layout

  endwhile
\end_layout

\begin_layout Plain Layout

end
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Pseudocode-for-optimization-1"

\end_inset

Pseudo-code for optimization
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
