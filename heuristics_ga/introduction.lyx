#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
As explained in the introduction, optimization problems are about finding
 the optimal solution to a problem.
 Solutions to these problems can be found using an algorithm, a predefined
 set of steps to execute.
\end_layout

\begin_layout Standard
Optimization problems have a solution space containing all possible solutions.
 Among these solutions is the optimal solution.
 This space might be very small making it possible to see the optimal solution
 right away without using an algorithm.
 But an optimization problem could have a very large solution space or even
 an infinitely large space.
 This makes it practically impossible or even completely impossible to traverse
 the whole solution space, even by using an algorithm.
\end_layout

\begin_layout Standard
For some problems an exact algorithm exists that will guarantee an optimal
 solution, without inspecting each solution separately.
 An example is the algorithm for finding the maximum of a simple formula
 like 
\begin_inset Formula $f(x)=x^{2}$
\end_inset

 where a derivation will produce the x-coordinate of the maximum.
\end_layout

\begin_layout Standard
In case such an algorithm is not known, it is necessary to inspect each
 element to find a proven optimal solution.
 This can only be done for solution spaces that are not infinite.
\end_layout

\begin_layout Standard
In order to find the optimal solution using an exact algorithm, it is important
 that this algorithm runs in polynomial time.
 If the algorithm does not run in polynomial time then the number of steps
 to be executed during calculation exceeds exponential growth for every
 element added to the problem.
 It is therefore unlikely that the algorithm will produce a solution within
 a lifetime for large solution spaces.
\end_layout

\begin_layout Standard
Given that it is currently impossible to find a proven optimal solution,
 it might be enough to find an approximate optimal solution.
 It may not be possible to prove that this solution is the optimal solution,
 but it might be good enough in practice.
\end_layout

\begin_layout Standard
Heuristic algorithms are used to approximate the optimal solution.
 This section will first explain the essence of heuristics.
 The second part will cover genetic algorithms, a type of heuristics.
 The last part will cover hybrid genetic algorithm, an even more advanced
 heuristic.
\end_layout

\end_body
\end_document
