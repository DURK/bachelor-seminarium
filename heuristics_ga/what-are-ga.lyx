#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\master ../master.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
Genetic Algorithms
\begin_inset CommandInset label
LatexCommand label
name "sub:Genetic-algorithms"

\end_inset


\end_layout

\begin_layout Standard
From 1960 until 1970 a new form of heuristics was introduced that was inspired
 by the way nature is evolving.
 Some computer scientists were staggered with the fact that nature was able
 to produce solutions to problems that could not be solved by algorithms
 that could be constructed in these in a million years.
 An example of such a problem could be how to schedule all tasks within
 a human body in such a way that every part of the body can function.
\end_layout

\begin_layout Standard
Simultaneously two major algorithms were developed.
 On one side of the the globe the German computer scientist Rechenberg introduce
d Evolutionary Algorithms and on the other side Johan Holland developed
 Genetic Algorithms at the University of Michigan.
\end_layout

\begin_layout Standard
Genetic algorithms are a specific group of heuristics defined by John Holland
 at the University of Michican in 1960.
 Holland was inspired by the way nature was able to produce solutions to
 problems quicker than man could using formula's.
 He defined a set of rules for an algorithm that would define a solution-set,
 also called a population.
 
\end_layout

\begin_layout Standard
Each solution in the set is represented by a chromosome.
 This chromosome might be a bit-string or even a set of mathematical equations.
 The different parts in chromosome are called genes and determine the actual
 outcome of the chromosomes solution.
 In case the chromosome is a bit-string, the developer might define every
 bit as being a gene.
\end_layout

\begin_layout Standard
A population holds a generation of chromosomes from which a new generation
 can be formed.
 The new generation is made up by combining chromosomes from the previous
 generation, using a form of natural selection, where the best chromosomes
 are picked more often than the lesser ones.
 Using this strategy, the population would overall become better with each
 new generation.
\begin_inset CommandInset citation
LatexCommand cite
key "introduction-ga"

\end_inset


\end_layout

\begin_layout Subsubsection
Concept of GA
\end_layout

\begin_layout Paragraph
Initial
\end_layout

\begin_layout Standard
The algorithm starts by creating the first generation of chromosomes.
 This size may differ from a couple of chromosomes to a couple of thousand.
 This starting population will be used to generate a new generation in the
 next step.
\end_layout

\begin_layout Paragraph
Iterative step
\end_layout

\begin_layout Standard
During the iterative step the generation is reproduced into a new generation.
 Before reproduction the algorithm calculates the fitness of every chromosome.
 The formula for fitness is written such that it will give a higher score
 to chromosomes that tend to be closer to the ideal solution.
 The chromosomes are than ordered by ratio of their fitness and a mating
 population will be selected accordingly.
 In other words, if a chromosome has a relatively high score it will likely
 be used more often in reproduction.
\end_layout

\begin_layout Standard
A new chromosome is formed by combining a random selection of chromosomes
 from the previous population.
 The genes of this chromosome are mixed using a 
\emph on
crossover
\emph default
 technique.
 This technique takes a couple of genes from the first chromosome and fills
 it up with genes from the other chromosome.
 The result is a new chromosome consisting of key-features from its parents.
\end_layout

\begin_layout Standard
The 
\emph on
crossover
\emph default
 step will create a combination of genes from solutions that are already
 present within the current population.
 Due to the selection method this new chromosome is likely to be equally
 best or even better than the chromosomes it was based upon.
 If this is the case, the solutions will converge to a, perhaps local, optimal
 solution.
 Their is no guarantee though that best combination of genes present is
 actually the best solution possible, for the starting generation might
 not necessarily contain the best solution or early selection has gotten
 rid of genes that were part of the best solution.
 This would cause the algorithm to find a local optima instead of the global
 optima.
\end_layout

\begin_layout Standard
Not finding the global optimal solution is prevented by including an incidental
 extra step: a 
\emph on
mutation
\emph default
.
 The mutation step randomly changes a gene in the chromosome.
 This mutation can introduce new genes allowing the algorithm to divert
 to a new part of the solution space.
\end_layout

\begin_layout Standard
Crossover and mutation are not applied for every step.
 Having a too high frequency of one of the two might cause the algorithm
 to never converge to a certain optimum while having a too low frequency
 might cause the algorithm to converge too fast to a local optimum.
 The frequency of the two is often determined by trial and error.
 It can be said that crossover happens a lot more often than mutation.
\end_layout

\begin_layout Standard
An extra step that can be added to the iterative step is the replacement
 of the chromosomes with the lowest fitness score by two completely new
 ones.
 This will also stimulate the diverse behaviour of the algorithm.
\end_layout

\begin_layout Paragraph
Termination step
\end_layout

\begin_layout Standard
There a multiple ways to terminate the algorithm.
 It depends on the type of problem which methods suits best.
 One of the ways is to stop when the population contains a (percentage)
 of chromosomes that meet a preset fitness value.
 Another way is stop when the population has not changed over the last generatio
ns.
 It is also possible to stop after a fixed number of generations or after
 a period of time.
\end_layout

\begin_layout Standard
Genetic algorithms are suitable for problems with a large solution space
 in which it is hard to guess where the optimum is.
 Due to the usage of a solution set, the algorithm is able to inspect multiple
 solutions in the solution space.
 The natural selection offers the possibility for the solutions to become
 closer to each other and for converging to a (local) optimum.
 In contrast to local search algorithms, the genetic algorithms has a built-in
 solution to prevent a local optimum as solution by adding mutation that
 will make the algorithm search through a larger part of the solution space.
\end_layout

\end_body
\end_document
