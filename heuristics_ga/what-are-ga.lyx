#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\master ../master.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
Genetic Algorithms
\begin_inset CommandInset label
LatexCommand label
name "sub:Genetic-algorithms"

\end_inset


\end_layout

\begin_layout Standard
From 1960 until 1970 a new form of heuristics was introduced that was inspired
 by the way nature is evolving.
 Computer scientists were staggered by the fact that nature was able to
 produce solutions to problems that could not be solved by algorithms that
 could be constructed in these in a million years.
 An example of such a problem could be how to schedule all tasks within
 a human body in such a way that every part of the body can function.
\end_layout

\begin_layout Standard
Simultaneously two major algorithms were developed.
 On one side of the the globe the German computer scientist Rechenberg introduce
d Evolutionary Algorithms and on the other side Johan Holland developed
 Genetic Algorithms at the University of Michigan
\begin_inset CommandInset citation
LatexCommand cite
key "rechenberg1973,Holland-1975"

\end_inset

.
\end_layout

\begin_layout Standard
Genetic algorithms are a specific group of heuristics defined by John Holland
 at the University of Michigan in 1960.
 Holland was inspired by the way nature was able to produce solutions to
 problems quicker than man could using formulas.
 He defined a set of rules for an algorithm to work with a solution set,
 also called a population.
 
\end_layout

\begin_layout Standard
Each solution in the set is represented by a chromosome.
 This chromosome might be a bit-string or even a set of mathematical equations.
 The different parts in chromosome are called genes.
 In case the chromosome is a bit-string, the developer might define every
 bit as being a gene.
 When creating a chromosome for a schedule, each gene could be symbol representi
ng a task.
\end_layout

\begin_layout Standard
From a population of chromosomes a new generation can be created.
 The regeneration process is started by evaluating the fitness of every
 chromosome of the current population.
 Fitness is determined by a set of rules that define the optimal solution.
 The fitness of a chromosome that represents the maximum of a formula, can
 be seen as the higher the number, the fitter the chromosome.
\end_layout

\begin_layout Standard
Once this fitness is known a new generation can be created by selecting
 chromosomes from the current population.
 The selection algorithm should make sure that the fitter chromosomes are
 more likely to be chosen than the less fitter ones.
 These two chromosomes will now be used to create a new chromosome, using
 a crossover technique that will be explained later on in this section.
 Using this strategy, the population will overall become better with each
 new generation.
\begin_inset CommandInset citation
LatexCommand cite
key "introduction-ga"

\end_inset


\end_layout

\begin_layout Standard
In the following paragaphs we will explain the different steps of the genetic
 algorithm in some more detail.
 These steps are also illustrated using pseudo code in Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Pseudocode-for-ga"

\end_inset

.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

begin
\end_layout

\begin_layout Plain Layout

  t=0
\end_layout

\begin_layout Plain Layout

  initialize P(t)
\end_layout

\begin_layout Plain Layout

  while (not termination condition) do
\end_layout

\begin_layout Plain Layout

    O(t) = recombine P(t) by crossover and mutation
\end_layout

\begin_layout Plain Layout

    evaluate O(t)
\end_layout

\begin_layout Plain Layout

    select from O(t) and add to new population P(t+1)
\end_layout

\begin_layout Plain Layout

    t++
\end_layout

\begin_layout Plain Layout

  endwhile
\end_layout

\begin_layout Plain Layout

end
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Pseudocode-for-ga"

\end_inset

Pseudo code of genetic algorithm
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Initialization
\end_layout

\begin_layout Standard
The algorithm starts by creating the first generation of chromosomes.
 The size of a population may differ from a couple of chromosomes to a couple
 of thousand.
 This starting population will be used to generate a new generation in the
 next step.
\end_layout

\begin_layout Paragraph
Iterative step
\end_layout

\begin_layout Standard
During the iterative step the population is evolved into a new generation.
 Before reproduction the algorithm calculates the fitness of every chromosome.
 The formula for fitness is written such that it will give a higher score
 to chromosomes that tend to be closer to the ideal solution.
 The chromosomes are ordered by ratio of their fitness and a mating population
 will be selected accordingly.
 In other words, if a chromosome has a relatively high score it will likely
 be used more often in reproduction.
\end_layout

\begin_layout Standard
A new chromosome is formed by combining a random selection of chromosomes
 from the previous population.
 The genes of this chromosome are mixed using a 
\emph on
crossover
\emph default
 technique.
 This technique takes a couple of genes from the first chromosome and fills
 it up with genes from the other chromosome.
 The result is a new chromosome consisting of key-features from its parents.
\end_layout

\begin_layout Standard
The 
\emph on
crossover
\emph default
 step will create a combination of genes from solutions that are already
 present within the current population.
 Due to the selection method this new chromosome is likely to be equally
 as good or even better than the chromosomes it was based upon.
 If this is the case, the solutions will converge to a, perhaps local, optimal
 solution.
 There is no guarantee though that the best combination of genes present
 is the global optimum, for the starting generation might not necessarily
 contain the best solution or early selection has gotten rid of genes that
 were part of the optimal solution.
 This would cause the algorithm to find a local optimum instead of the global
 optimum.
\end_layout

\begin_layout Standard
The chance of converging to a local optimum can be decreased by including
 an incidental extra step: a 
\emph on
mutation
\emph default
.
 The mutation step randomly changes a gene in the chromosome.
 This mutation can introduce new genes allowing the algorithm to divert
 to a new part of the solution space.
\end_layout

\begin_layout Standard
During each iteration crossover and mutation are only applied to a selection
 of chromosomes, picked by a random process with a preset probability.
 Having a too high frequency of one of the two might cause the algorithm
 to never converge to a certain optimum while having a too low frequency
 might cause the algorithm to converge too fast to a local optimum.
 The frequency of the two is often determined by trial and error.
 It can be said that crossover happens a lot more often than mutation.
\end_layout

\begin_layout Standard
An extra step that can be added to the iterative step is the replacement
 of the chromosomes with the lowest fitness score by two completely new
 ones.
 This will also stimulate the diverse 
\lang british
behavior
\lang english
 of the algorithm improving the chances of searching the complete solution
 space.
\end_layout

\begin_layout Paragraph
Termination step
\end_layout

\begin_layout Standard
There are multiple ways to terminate the algorithm.
 It depends on the type of a problem which methods suit best.
 One of the ways is to stop when the population contains a (percentage)
 of chromosomes that meet a preset fitness value.
 Another way is to stop when the population has not changed over the last
 generations.
 It is also possible to stop after a fixed number of generations or after
 a period of time.
\end_layout

\begin_layout Standard
Genetic algorithms are suitable for problems with a large solution space
 in which it is hard to guess where the optimum is and when there is no
 exact algorithm that can find an optimum within polynomial time.
 Due to the usage of a solution set, the algorithm is able to inspect multiple
 solutions in the solution space.
 The natural selection offers a possibility for the solutions to become
 closer to each other and for converging to a (local) optimum.
 In contrast to local search algorithms, the genetic algorithms has a built-in
 solution to decrease the chance of converging to a local optimum, for example
 by adding a mutation step.
 It is important to find a good balance in applying crossover and mutation.
 Having an incorrect balance could cause the algorithm to become very slow,
 to never converge or to converge to quickly causing a local optimum to
 be found.
\end_layout

\end_body
\end_document
