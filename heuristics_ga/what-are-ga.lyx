#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\master ../master.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
Genetic algorithms
\end_layout

\begin_layout Standard
From 1960 untill 1970 a new form of heuristics was introduced that was inpspired
 by the way nature is evolving.
 Some computer scientists were staggering with the fact that nature was
 able to produce solutions to problems that could not be solved by complex
 computer programs in a million years.
\end_layout

\begin_layout Standard
Simultaneously two major algorithms were developped.
 On one side of the the globe the German computer scientist Rechenberg introduce
d Evolutionary Algorithms and on the other side Johan Holland developped
 Genetic Algorithms at the University of Michigan.
\end_layout

\begin_layout Standard
Genetic algorithms are a specific group of heuristics defined by John Holland
 at the University of Michican in 1960.
 Holland was inspired by the way nature was able to produce solutions to
 problems quicker than man could using formula's.
 He defined a set of rules for an algorithm that would define a set of populatio
n.
 A population holds a generation of chromosones from which a new generation
 can be formed.
 The new generation is made up by combining chromosomes from the previous
 generation, using a form of natural selection, where the best chromosomes
 are picked more often than the lesser ones.
 Using this strategy, the population would overall become better with each
 new generation.
\begin_inset CommandInset citation
LatexCommand cite
key "introduction-ga"

\end_inset


\end_layout

\begin_layout Subsubsection
Concept of GA
\end_layout

\begin_layout Paragraph
Initial
\end_layout

\begin_layout Standard
The algorithm starts by creating the first generation of chromosomes.
 This size may differ from a couple of chromosomes to a couple of thousand.
 This starting population will be used to generate a new generation in the
 next step.
\end_layout

\begin_layout Paragraph
Iterative step
\end_layout

\begin_layout Standard
During the iterative step the generation is reproduced into a new generation.
 Before reproduction the algorithm calculates the fitness of every chromosome.
 The formula for fitness is written such that it will give a higher score
 to chromosomes that tend to be closer to the ideal solution.
 The chromosomes are than ordered by ratio of their fitness and a mating
 population will be selected accordingly.
 In other words, if a chromosome has a relatively high score it will likely
 be used more often in reproduction.
\end_layout

\begin_layout Standard
A new chromosome is formed by selecting two random chromosomes from the
 previous population.
 The genes of this chromosome are mixed using a 
\emph on
cross-over
\emph default
 technique.
 This technique takes a couple of genes from the first chromosome and fills
 it up with genes from the other chromosome.
 The result is a new chromosome consisting of key-features from its parrents.
\end_layout

\begin_layout Standard
The 
\emph on
cross-over
\emph default
 step will converge to the best combination of genes that is already present
 within the current population.
 Their is no guarantee though that best combination of genes present is
 actually the best solution possible, for the starting generation might
 not nescearliy contain the best solution.
 This would cause the algorithm to find a local optima instead of the global
 optima.
\end_layout

\begin_layout Standard
This unwanted results is prevented by including an incidental extra step:
 a 
\emph on
mutation
\emph default
.
 The mutation step randomly changes a gene in the chromosome.
 This mutation can introduce new genes allowing the algorithm to divert
 to a new part of the solution space.
\end_layout

\begin_layout Standard
Cross-over and mutation are not applied for every step.
 Having a too high frequency of one of the too might cause the algorithm
 to never converge to a certain optima while having a too low frequency
 might cause the algorithm to converge to fast to a local optima.
 The frequency of the two is often determined by trial and error.
 It can be said that cross-over happens a lot more often than mutation.
\end_layout

\begin_layout Standard
An extra step that can be added to the iterative step is the replacement
 of the chromosomes with the lowest fitness score by two completely new
 ones.
 This will also stimulate the diversive behaviour of the algorithm.
\end_layout

\begin_layout Paragraph
Termination step
\end_layout

\begin_layout Standard
There a multiple ways to terminate the algorithm.
 It depends on the type of problem which methods suits best.
 One of the ways is to stop when the population contains a (percentage)
 of chromosomes that meet a pre-set fitness value.
 Another way is stop when the population has not changed over the last generatio
ns.
 It is also possible to stop after a fixed number of generations or after
 a period of time.
\end_layout

\begin_layout Subsubsection*
\begin_inset space \thinspace{}
\end_inset


\end_layout

\begin_layout Standard
\noindent
Genetic algorithms are suitable for problems with multiple solutions that
 somewhere contain the most optimal solution.
 Examples of problems can be finding the maximum value for some mathematical
 formula, optimizing the number of switches in an electrical system but
 also for finding the most optimal shape of a wing on a plain (which in
 fact is the optimalisation of parameters in a formula).
\end_layout

\end_body
\end_document
