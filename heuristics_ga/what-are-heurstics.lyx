#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
Heuristics
\end_layout

\begin_layout Standard
In general, heuristics can be seen as a "rule of thumb" by experience when
 making decisions.
 This definition also applies largely to heuristics in computer science;
 also called heuristic algorithms.
\end_layout

\begin_layout Standard
Heuristic algorithms are developed by computer scientists in order to solve
 problems for which there either is no exact algorithm, or using an exact
 algorithm would take too much time or space.
 Using heuristics, the optimal solution to a problem can be approximated,
 within an acceptable amount of time.
 The amount of time that would lie between the margins of acceptability,
 is defined by the user of the heuristic and depends on the problem.
 Also, computer scientists want the most efficient algorithms to find these
 approximations to the optimal solution for a problem.
 However, because there may not be an exact solution to the problem, a heuristic
 algorithm in most cases cannot be proven to be the most efficient.
\end_layout

\begin_layout Standard
So, by using a "rule of thumb", computer scientists iteratively determine
 whether an algorithm solves the problem, and quantify how efficiently it
 does that.
 This typically involves testing by trial and error, adjusting formulas
 and variables on every iteration, until being satisfied with the accuracy
 of the results and efficiency of the algorithm.
\end_layout

\begin_layout Subsubsection
Greedy algorithm example
\end_layout

\begin_layout Standard
A clear example of a heuristic algorithm is the Greedy Algorithm.
 This algorithm has been described for solving for example the Travelling
 Salesman Problem (TSP), which is NP-hard 
\begin_inset CommandInset citation
LatexCommand cite
key "Bentley-1982"

\end_inset

.
 TSP is defined as: given a list of cities and their mutual distances, finding
 the shortest possible route that visits each city exactly once.
\end_layout

\begin_layout Standard
A greedy algorithm always makes the choice that looks best in the current
 problem, without considering results from subproblems.
 In other words, Greedy Algorithms continuesly make a locally optimal choice
 in the hope that this choice will lead to a globally optimal solution.
 In case of the Traveling Salesman Problem, each local optimal choice is
 defined as visiting an unvisited city nearest to the current city.
\end_layout

\begin_layout Standard
Greedy algorithms are heuristics in the sense that, although we cannot prove
 that this algorithm efficiently approximates the optimal answer, practice
 shows that it usually does 
\begin_inset CommandInset citation
LatexCommand cite
key "Cormen-Leiserson-Rivest-Stein-2001"

\end_inset

.
\end_layout

\end_body
\end_document
