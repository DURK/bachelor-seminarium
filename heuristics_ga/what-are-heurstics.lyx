#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
What are heuristics
\end_layout

\begin_layout Paragraph*
Introduction
\end_layout

\begin_layout Standard
In general, heuristics can be seen as a "rule of thumb" by experience when
 making decisions.
 This definition also applies largely to heuristics in computer science;
 also called heuristic algorithms.
\end_layout

\begin_layout Standard
Heuristic algorithms are created by programmers to solve a problem, for
 which there is no (doable, polynomial) exact algorithm.
 Also, programmers want the most efficient algorithms to do so.
 But because an exact solution does not exist, a heuristic algorithm cannot
 be proven to be the most efficient.
\end_layout

\begin_layout Standard
So, by using a "rule of thumb", programmers have to iteratively determine
 if an algorithm solves the problem, and quantify how efficient it does
 that.
 This could mean testing by trial and error, adjusting formulas and variables
 every iteration, until being satisfied with the accuracy of the results
 and efficiency of the algorithm.
\end_layout

\begin_layout Paragraph*
Examples of heuristics
\end_layout

\begin_layout Subparagraph*
Product targeting problem
\end_layout

\begin_layout Standard
The product targeting problem depictst finding an optimization model for
 the selection of sets of clients that will receive an offer for one or
 more products during a promotion campaign.
 It has been shown that this problem is NP-hard and that it is unlikely
 that a constant-factor approximation algorithm can be proposed for solving
 this problem.
 Especially for large input, heuristics are preferable.
\end_layout

\begin_layout Subparagraph*
Greedy algorithm heuristic
\end_layout

\begin_layout Standard
Another example of a heuristic algorithm is one Jon Bentley described for
 solving the travelling salesman problem (TSP).
 TSP is known to be NP-hard so an optimal solution for even moderate size
 problem is intractable.
 Instead the greedy algorithm can be used to to give a good but not optimal
 (it is an approximation to the optimal answer) in a short amount of time.
 The greedy algorithm heuristic says to pick whatever is currently the best
 next step regardless of whether that precludes good steps later.
 It is a heuristic in that practice says it is a good enough solution, theory
 says there are better solutions.
\end_layout

\begin_layout Paragraph*
Critics
\end_layout

\end_body
\end_document
