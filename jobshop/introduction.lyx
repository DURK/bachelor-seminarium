#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
Introduction to the job shop problem
\end_layout

\begin_layout Standard
The job shop problem (JSP) is a well known problem because of its many possible
 applications in manufacturing and is central to many supply chain problems
 that integrate production planning and scheduling.
 But it is also one of the hardest combinatorial problems.
 The JSP is defined as follows: "for n jobs and m machines, find a way to
 process jobs as fast as possible".
 Take the following in consideration:
\end_layout

\begin_layout Itemize
A machine can process only 1 job at a time.
\end_layout

\begin_layout Itemize
A job consists of at most m operations.
\end_layout

\begin_layout Itemize
An operation has to be processed for a given time on a given machine in
 a predefined sequence
\end_layout

\begin_layout Itemize
While processing an operation, it cannot be paused and be resumed later.
 So you cannot split an operation.
\end_layout

\begin_layout Standard
So a job sequence for each machine has to be determined to minimize the
 makespan.
 The makespan is the total length of the schedule, the overall time when
 all the jobs have finished processing.
\end_layout

\begin_layout Standard
In the example below, there are 3 jobs and 3 machines.
 Each job consists of 3 operations which have to be processed in a given
 sequence.
 The jobs are being split to approximate the optimal answer.
 The makespan here is 6.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename gantt.pdf
	width 60text%
	BoundingBox 70bp 700bp 420bp 795bp
	clip

\end_inset


\begin_inset Graphics
	filename table.pdf
	width 40line%
	BoundingBox 50bp 630bp 250bp 800bp
	clip

\end_inset


\end_layout

\begin_layout Standard
There are several ways to solve a job shop scheduling problem using different
 types of heuristic algorithms.
 The easiest heuristics solutions for JSP are dispatching rules, which are
 actually rules of thumb, discussed i
\emph on
n Section 3.1
\emph default
.
 Dispatching rules are fast, simple to implement and reasonably good in
 a relatively short time, but often limited in practice when more constraints
 are needed.
 A dispatching rule prioritizes all the jobs that are awaiting for processing
 on a machine.
 When a machine has no more jobs to process, a dispatching rule grant the
 job with the highest priority to the machine.
 Dispatching rules prioritize in different ways, for example shortest processing
 time first, earliest completion time first etc.
 
\end_layout

\begin_layout Standard
Although many heuristic solutions have been proposed over the years, most
 researchers use hybrid heuristics combined with local search optimizations
 to get significantly better results.
 Some of these solutions, specifically genetic heuristics and genetic local
 search, will be explored in the following sections.
\end_layout

\end_body
\end_document
