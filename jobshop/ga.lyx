#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
Genetic algorithms
\end_layout

\begin_layout Standard
From 1990 until 2000 there has been extensive research into pure genetic
 algorithms for solving the job shop problem.
 A lot of different approaches have been defined for representing the solutions
 as chromosomes and there have been even more strategies for applying cross
 over onto these chromsomes.
 In the period after 2000 scientists realised that the usage of pure genetic
 algorithms was inefficient and they introduced extra heuristics to generate
 better results and produce them faster.
\end_layout

\begin_layout Standard
This chapter will cover a couple of methods that use pure genetic algorithms
 without additional heuristics.
 The first part will go into the different ways of representing the solution
 and the second part will cover crossover.
 The last part will cover the selection of a new population step.
\end_layout

\begin_layout Subsubsection
Representations
\end_layout

\begin_layout Standard
A chromosome as representation of the solution is crucial for the functioning
 of genetic algorithms.
 The two core types of chromosomes can be divided into binary and symbolic
 representations.
 As the name suggests, the first one consists merely of zeros and ones.
 This representation is how Holland described chromosomes in his original
 definition of genetic algorithms.
 The second representation, using symbols, was introduced to the field of
 genetic algorithms later.
\end_layout

\begin_layout Standard
This section will discuss the symbolic representation only.
 Within the set of symbolic representations it is again possible to distinct
 two groups, namely 
\emph on
direct
\emph default
 and 
\emph on
indirect
\emph default
.
 In direct chromosomes each gene represents an actual part of the schedule.
 For example each gene could be a task and the order of the genes within
 the chromosome are equal to the order or execution the tasks.
 For indirect chromosomes, the genes represent parameters for an algorithm
 that uses dispatching rules as described in [job shop inleiding].
\end_layout

\begin_layout Standard
Within these two groups there are some ways to represent the actual solutions.
 A list of different representations divided in the two groups can be found
 in table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Ways-of-representing"

\end_inset

[ref to cheng part1].
 As illustration of a representation, the re
\end_layout

\begin_layout Standard
st of this section will describe the 
\emph on
operation-based algorithm
\emph default
.
\end_layout

\begin_layout Standard
In an operation-based algorithm each gene in the chromosome represents an
 operation.
 At first it might seem logical to number each operation independently of
 its tasks.
 This method would cause a lot of 
\emph on
illegal
\emph default
 combinations because the operations within a job have a precedence constraint.
 Mixing up the order would cause an invalid schedule.
\end_layout

\begin_layout Standard
A solution to prevent illegal combinations was found by Gen et al.
 They have numbered all operations by their parental job number.
 If a problem consisted of three jobs all having three operations, the chromosom
e would consist of three times the numbers one, two and three as shown in
 figure X.
 Because the order of operations within a job are fixed, it is possible
 to construct a valid schedule based on the slots reserved for the jobs
\begin_inset CommandInset citation
LatexCommand cite
key "operation-based"

\end_inset

.
\end_layout

\begin_layout Standard
The schedule is formed by processing the genes in order of occurence within
 the chromosome.
 Taking the example of figure X, the first job is job number one.
 The algorithm will now schedule the first operation of job number one at
 the first available spot.
 The same for the gene, that will cause the first operation of the third
 job to be placed at the next available spot.
\begin_inset Float table
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Direct
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Indirect
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operation-based
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Priority rule-based
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Job-based
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Preference list-based
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Random keys
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Disjunctive graph-based
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Job pair relation-based
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Machine-based
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color magenta
Completion time-based??
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Ways-of-representing"

\end_inset

Ways of representing a solution to the jobshop problem
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Crossover
\end_layout

\begin_layout Standard
The crossover method will combine the genes of different chromosomes to
 generate a new population that might be better than the previous one.
 During this operation some genes are switched from one chrome to another.
 In some basic genetic algorithms this operation is rather easy because
 all permutations of genes are valid.
\end_layout

\begin_layout Standard
In case of the job shop problem, given the operation-based representation,
 there is a difficulty.
 Each gene in the chromosome represents an actual operation.
 Applying a simple crossover could generate a chromosome that contains an
 actual operations twice, making this chromosome invalid.
\end_layout

\begin_layout Standard
There are many solutions to this problem, that use an intelligent algorithms
 for applying crossover[refer to some of them].
 These algorithms still exchange their genes but instead of just crossing,
 each gene is evaluated by some rules before it is inserted into the new
 chromosome.
\end_layout

\begin_layout Standard
An example of such an intelligent crossover method is 
\emph on
partially-mapped crossover (PMX)
\emph default
 that was proposed by Goldberg and Lingle[cite].
 The algorithm starts like a standard crossover algorithm by selecting two
 chromosomes from the parental population.
 Next the algorithm chooses two random cutting positions as shown in figure
 X.
 The genes within the two cutting positions will be swapped.
 This will cause a conflict within the chromosome because X and Y now have
 more jobs within the chromosome than in the actual problem.
 This is where the algorithm takes effect.
 The two substrings are copied into the new generation and the algorithm
 will now start to copy the other genes one by one.
 Each gene is checked for validity.
 If the gene is not already present it will be copied to the new chromosome.
 If it is present already, the algorithm will take the first gene from the
 original substring that is not already present in the current chromosome
 and use this gene.
 
\end_layout

\begin_layout Standard
Using this technique generates a valid new population, does exchange properties
 and validity is kept in such a way that the properties (the order of executing
 tasks) is preserved as much as possible.
\end_layout

\begin_layout Subsubsection
Fitness
\end_layout

\begin_layout Standard
Creating a fitness function for this algorithm is straightforward.
 The job shop problem is about finding the schedule that finishes as quickly
 as possible.
 The fitness function can simply be based on the earliest finishing time.
 A variation of the job shop problem could also check the number of time
 machines are not doing anything.
\end_layout

\begin_layout Standard
Using pure genetic algorithms will provide the user with a solution that
 in some case is near-optimal.
 The next section will show how combining genetic algorithms with local
 search will provide solutions that are more optimal than the results of
 pure genetics.
\end_layout

\end_body
\end_document
