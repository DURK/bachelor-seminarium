#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
Genetic Algorithms
\end_layout

\begin_layout Standard
From 1990 until 2000 there has been extensive research into pure genetic
 algorithms for solving the job shop problem.
 A lot of different approaches have been defined for representing the solutions
 as chromosomes and there have been even more strategies for applying cross
 over onto these chromosomes.
 In the period after 2000 scientists realized that the usage of pure genetic
 algorithms was not efficient enough compared to heuristics.
\end_layout

\begin_layout Standard
This chapter will cover a couple of methods that use pure genetic algorithms
 without additional heuristics.
 The first part will go into the different ways of representing the solution
 and the second part will cover crossover.
 The last part will cover determining of the fitness.
\end_layout

\begin_layout Standard
The JSP is a permutation problem as described in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Introduction-jsp"

\end_inset

.
 A permutation problem means that there is a list of items, in the JSP case
 a list of operations, that must be ordered in some way.
\end_layout

\begin_layout Paragraph
Initial step
\end_layout

\begin_layout Standard
Developping a genetic algorithm for a permutation problem starts with the
 design of a representation.
 This representation must hold all characteristics of the solution in order
 to create a consistent schedule.
 Furthermore the chromosome must admit crossover and mutation operations.
\end_layout

\begin_layout Standard
There are two main ways to represent a solution to the JSP.
 The first, conventional, method is to use a binary representation of the
 problem.
 The second method uses a symbolic representation.
\end_layout

\begin_layout Standard
In the early days of genetic algorithms researchers thought that binary
 representations were the only representation that would allow for crossovers
 to be applied.
 This has led to several binary representations of the JSP in the form of
 a chromosome
\begin_inset CommandInset citation
LatexCommand cite
key "nakano1991"

\end_inset

.
\end_layout

\begin_layout Standard
But the view on genetic algorithms has changed and a way was found to apply
 crossover to symbolic representations.
 Using symbolic representations is more suitable to permutational problems
\begin_inset CommandInset citation
LatexCommand cite
key "permuations"

\end_inset

.
 This article will therefore only cover symbolic representations.
\end_layout

\begin_layout Standard
The set of symbolic representations can be divided into two groups called
 
\emph on
indirect
\emph default
 and 
\emph on
direct
\emph default
 representation.
 Indirect representations use a chromosome that does not consist of actual
 tasks, but of variables for other heuristic algorithms that can construct
 a schedule.
 The use of indirect representations is out of the scope of this article.
 This article will cover direct representations, where each symbol in the
 chromosomes represents an operation or job.
\end_layout

\begin_layout Standard
To illustrate the use of a direct symbolic representation we will show how
 an operation-based representation could work.
 Operation-based representation is one of the many ways of representing
 the schedule
\begin_inset CommandInset citation
LatexCommand cite
key "cheng99"

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "operation-based"

\end_inset

.
 As the name suggests, each gene in the chromosome represents an operation.
 Assume a problem with two jobs 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 both consisting of two operations 
\begin_inset Formula $A_{1}$
\end_inset

, 
\begin_inset Formula $A_{2}$
\end_inset

 and 
\begin_inset Formula $B_{1}$
\end_inset

 ,
\begin_inset Formula $B_{2}$
\end_inset

 respectively.
 The chromosome has a length of four genes.
\end_layout

\begin_layout Standard
This chromosome must somehow map to a solution.
 This can be done by popping each element from the chromosome and schedule
 this element at the first location possible, in order of appearence.
 In other words, if the chromosome is 
\begin_inset Formula $A_{1}B_{1}A_{2}B_{2}$
\end_inset

, then 
\begin_inset Formula $A_{1}$
\end_inset

 is planned first, next 
\begin_inset Formula $B_{1}$
\end_inset

 and so on as is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:construction-ga--jsp"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement p
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/ga-jsp1.pdf
	width 100text%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Start out with the gene 
\begin_inset Formula $A_{1}B_{1}A_{2}B_{2}$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/ga-jsp2.pdf
	width 100text%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Pop the first gene A1 and schedule the first operation A1 to machine 1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/ga-jsp3.pdf
	width 100text%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Pop the second gene and schedule it
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/ga-jsp4.pdf
	width 100text%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Pop the third and fourth and schedule them in order
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Example of construction a solution from a operation-based chromosome
\begin_inset CommandInset label
LatexCommand label
name "fig:construction-ga--jsp"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Although there is a perfect mapping possible there is a problem with this
 representation.
 As stated before, the chromosome must be able to admit to crossover operations.
 In the job shop problem there is a precedence constraint within the operations,
 meaning that 
\begin_inset Formula $A_{1}$
\end_inset

 should come before 
\begin_inset Formula $A_{2}$
\end_inset

.
 When applying crossover it could easily be possible that 
\begin_inset Formula $A_{2}$
\end_inset

 is placed before 
\begin_inset Formula $A_{1}$
\end_inset

, resulting in 
\begin_inset Formula $A_{2}$
\end_inset

 being scheduled before 
\begin_inset Formula $A_{1}$
\end_inset

.
 This leads to an 
\emph on
illegal
\emph default
 combination as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:illegal-chromosome"

\end_inset

.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/ga-jsp5.pdf
	width 30text%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Applying crossover in such a way that A_1 and A_2 are swapped leads to illegal
 chromosome
\begin_inset CommandInset label
LatexCommand label
name "fig:illegal-chromosome"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A solution to prevent illegal combinations was found by Gen et al
\begin_inset CommandInset citation
LatexCommand cite
key "gen1994"

\end_inset

.
 They have numbered all operations by their parental job number.
 Give the same problem of two jobs with both two operations, the chromosome
 would consist of two 
\begin_inset Formula $A$
\end_inset

's and two 
\begin_inset Formula $B$
\end_inset

's.
 The construction of the solution would be similar to the original situation
 but this time when a job is read from the chromosome, the first operation
 for that job is scheduled.
 Given the chromosome 
\begin_inset Formula $ABAB$
\end_inset

, the algorithm would now first find job 
\begin_inset Formula $A$
\end_inset

 and therefore schedule operation 
\begin_inset Formula $A_{1}$
\end_inset

.
 Next it finds 
\begin_inset Formula $B$
\end_inset

, so it will schedule 
\begin_inset Formula $B_{1}$
\end_inset

.
 Again it will find job 
\begin_inset Formula $A$
\end_inset

, and will schedule the next task for job 
\begin_inset Formula $A$
\end_inset

 which is 
\begin_inset Formula $A_{2}$
\end_inset

.
\end_layout

\begin_layout Standard
This solves the preceding constraint but there is still a problem left,
 which is repetition.
 There is a fixed number of operations within a job and using plain crossover
 methods could result in having a job occuring more times than there are
 operations for this job while another job occures less times than there
 are operations.
 This can not be fixed in the operation and will therefore be fixed in the
 crossover method described in the next paragraph.
\end_layout

\begin_layout Paragraph*
Crossover
\end_layout

\begin_layout Standard
The crossover method will combine the genes of different chromosomes to
 generate a new population.
 During this operation some genes are switched from one chromesome to the
 other.
 In some basic genetic algorithms this operation is rather easy because
 all permutations of genes are valid, but as explained in the previous paragraph
 there is a problem with repetition of operations.
\end_layout

\begin_layout Standard
There are many solutions to this problem that use an extra algorithm on
 top of the default crossover algorithm
\begin_inset CommandInset citation
LatexCommand cite
key "syswerda1989,davis1985,cheng1997"

\end_inset

.
 These algorithms still exchange the genes of multiple chromosomes but instead
 of just crossing, each gene is evaluated by some rules before it is inserted
 into the new chromosome.
\end_layout

\begin_layout Standard
An example of such a method crossover is 
\emph on
partially-mapped crossover (PMX)
\emph default
 that was proposed by Goldberg and Lingle
\begin_inset CommandInset citation
LatexCommand cite
key "goldberg1985"

\end_inset

.
 The algorithm starts like a default crossover algorithm by selecting two
 chromosomes from the parental population.
 Next the algorithm chooses two random cutting positions as shown in figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:pmx1"

\end_inset

.
 The genes within the two cutting positions will be swapped (
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:pmx2"

\end_inset

).
 If the other genes are just copied one-to-one it would cause a conflict
 within the chromosome because the chromosomes now have more jobs within
 the chromosome than in the actual problem.
 This is where the algorithm takes effect.
 The two substrings are copied into the new generation and the algorithm
 will now start to copy the other genes one by one but each gene is checked
 for validity.
 If the gene is not already present it will be copied to the new chromosome.
 If it is present already, the algorithm will take the first gene from the
 original substring that is not already present in the current chromosome
 and use this gene as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:pmx3"

\end_inset

.
 
\end_layout

\begin_layout Standard
Using this technique generates a valid new population, does exchange properties
 and validity is kept in such a way that the properties (the order of executing
 tasks) is preserved as much as possible.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement p
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/pmx_1.pdf
	width 50text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:pmx1"

\end_inset

Two selected chromosomes that will be crossed
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/pmx_2.pdf
	width 50text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:pmx2"

\end_inset

Two new chromosomes are built starting with crossing the selected substring
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/pmx_3.pdf
	width 50text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:pmx3"

\end_inset

The rest of the chromosome is built by copying genes 1-1 from the parent
 chromosome.
 The last gene 'B' of the chromosome to the left is not copy for it would
 result in an illegal chromosome.
 The substring is checked and the first gene is again illegal.
 The second gene of the substring is an A and will be copy to form a valid
 gene.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph*
Fitness
\end_layout

\begin_layout Standard
Next the fitness of each chromosome must be determined.
 A straightforward way of determining the fitness is to construct the schedule
 in the way describe in the representation paragragh.
 Once a schedule has been built the finish time is known.
 This finish time can be used as fitnessvalue.
\end_layout

\begin_layout Standard
Another approach could be to look for other properties of the algorithm.
 One example is to look at the amount of time machines are not doing anything
 while waiting for another job and use this as fitnessvalue.
\end_layout

\begin_layout Standard
Using pure genetic algorithms will provide the user with a solution that
 in some case is near-optimal.
 Currently pure genetic algorithms are not used anymore.
 Genetics algorithms are always combined with other stragetegies like local
 search.
 The next section will show how combining genetic algorithms with local
 search will provide better solutions to problems than pure genetic algorithms.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/pseudo-to-figure.pdf
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-recombination-,-local"

\end_inset

The recombination-, local search-, and evaluation-steps in the pseudo-code
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
