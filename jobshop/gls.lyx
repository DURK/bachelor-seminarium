#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
Genetic Local Search
\end_layout

\begin_layout Standard
This section will focus on genetic algorithms that heavily rely on local
 search, a common form of hybrid genetic algorithms.
 Genetic algorithms are designed to be effective at global search, but converge
 slowly.
 Local search on the other hand is effective at fine-tuning but often falls
 into local maxima, as shown in section 3.3.
 The hybrid approach combines the best of both worlds by combining genetic
 algorithms that perform global search and avoid falling into local maximum
 with local search that handles the fine-tuning
\begin_inset CommandInset citation
LatexCommand cite
key "cheng99"

\end_inset

.
 In this section, the general principles of combining genetic algorithms
 with local search are introduced first.
 Next, some state-of-the-art hybrid genetic algorithms to the job shop problem
 are presented in this section.
\end_layout

\begin_layout Subsubsection
Combining genetic algorithms with local search
\end_layout

\begin_layout Standard
Typical genetic algorithms recombine parents, followed by mutation, in order
 to produce new chromosomes.
 Selection of chronosomes is based on their fitness.
 In standard genetic algorithms, this fitness can be calculated immediately
 after 'birth'.
 In genetic algorithms combined with local search, selection is based on
 fitness after performing local search.
 This means offspring will be improved and these improvements will be passed
 on trough crossover.
 In essence, this causes offspring to 'learn', a principle called local
 optimization.
\end_layout

\begin_layout Standard
------ PSEUDOCODE DIE ER ALLICHT IN MAG!---
\end_layout

\begin_layout Standard
begin
\end_layout

\begin_layout Standard
t<-0
\end_layout

\begin_layout Standard
initialize P(t )(job sequences)
\end_layout

\begin_layout Standard
local search to improve chromosomes
\end_layout

\begin_layout Standard
evaluate P(t )
\end_layout

\begin_layout Standard
while (not termination condition) do 
\end_layout

\begin_layout Standard
begin 
\end_layout

\begin_layout Standard
recombine P(t ) 
\end_layout

\begin_layout Standard
local search to improve chromosomes 
\end_layout

\begin_layout Standard
evaluate P(t ) 
\end_layout

\begin_layout Standard
select to next population P(t ) 
\end_layout

\begin_layout Standard
t <-t+1 
\end_layout

\begin_layout Standard
end.
 
\end_layout

\begin_layout Subsubsection
Shifting Bottleneck Procedure
\end_layout

\begin_layout Standard
The first example is a combination of genetic algorithms with bottleneck
 shifting procedure.
 The shifting bottleneck procedure (SBP) is an extensively used heuristic
 to approach optimal solutions for the job shop problem.
 Given a JSP-instance that consists of a multi-machine schedule and a certain
 number of jobs.
 The SBP starts by creating a partial schedule of just the first machine.
 The SBP then continues by iteratively bringing another machine (named the
 bottleneck) into the schedule.
 On every iteration SPB locally reoptimizes the current partial schedule
 for each individual machine, one by one.
 In essence, this reduces the JSP from solving a multi-machine scheduling
 problem to repeatedly solving single-machine scheduling problems 
\begin_inset CommandInset citation
LatexCommand cite
key "Adams-and-Joseph-1988"

\end_inset

.
 By improving partial schedules constructed in previous iterations, before
 entering the next iterationm, SBP is called an constructive algorithm combined
 with local search.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Cesar-Rego-and-Renato-Duarte-2009"

\end_inset

.
\end_layout

\begin_layout Standard
Consider the hybrid genetic approach for the SBP.
 In this approach a chromosome is denoted as an encoded list of ordered
 machines.
 Genetic algorithms evolve those chromosomes in order to retrieve better
 sequences of machines for SPB.
 The bottleneck shifting procedure is used to derive a schedule from these
 encodings of machine sequences.
 Resulting schedules differ greatly in quality, depening on the sequence
 of bottleneck machines 
\begin_inset CommandInset citation
LatexCommand cite
key "cheng99"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Beam search
\end_layout

\begin_layout Standard
---Combining genetic algorithms with beam search has been proposed by Holsapple.
\end_layout

\begin_layout Standard
---In this approach a chromosome is denoted as an encoded job sequence.
\end_layout

\begin_layout Standard
---Genetic algorithm manipulate the job sequence.
\end_layout

\begin_layout Standard
---Filtered beam search generate 'best' schedule for give job sequence (chromoso
me)
\end_layout

\end_body
\end_document
