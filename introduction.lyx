#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
The job shop problem (JSP) is a well-known scheduling problem and is one
 of the hardest combinatorial optimization problems 
\begin_inset CommandInset citation
LatexCommand cite
key "Vaessens-Aarts-Lenstra-1996"

\end_inset

.
 In JSP a number of jobs consist of a number of operations that need to
 be performed by specific machines.
 A machine can only perform one operation at a time and each operation within
 a job must be finished before the next operation can be started.
 The essence of the JSP is to find a schedule that will finish all jobs
 as quickly as possible.
\end_layout

\begin_layout Standard
Combinatorial optimization problems like JSP are problems with discrete
 variables that can be combined and ordered in many ways.
 Among all combinations there is an optimal solution.
 The definition of optimal depends on the problem at hand.
 In case of the JSP it would be finding an ordering of operations that leads
 to the earliest finishing time.
\end_layout

\begin_layout Standard
The challenging part of solving problems like JSP is that there is no exact
 algorithm to solve each instance of this problem within polynomial time.
 Exact algorithms guarantee to find the proven optimal answer using a fixed
 number of steps.
 For JSP, such an algorithm has not yet been found.
\end_layout

\begin_layout Standard
However, exact algorithms for specific variants of JSP have been found.
 A specific variant with ten jobs and ten operations, known as the 10x10
 benchmark problem, was proposed by Muth and Thompson in 1963 and remained
 unsolved for over twenty years 
\begin_inset CommandInset citation
LatexCommand cite
key "Fisher63probabilisticlearning"

\end_inset

.
 The first proven optimal solution was developed with exact algorithms by
 Carlier in 1987 
\begin_inset CommandInset citation
LatexCommand cite
key "carlier-pinson"

\end_inset

.
 More difficult instances like the 15x15 JSP are still considered to be
 unsolvable within polynomial time using exact algorithms 
\begin_inset CommandInset citation
LatexCommand cite
key "Goncalves_ahybrid"

\end_inset

.
\end_layout

\begin_layout Standard
In this paper we will inspect non-exact algorithms to the JSP that do run
 within polynomial time.
 These algorithms will approximate the optimal solution using so-called
 heuristics.
 We will specifically cover pure genetic algorithms and genetic hybrid algorithm
s.
\end_layout

\begin_layout Standard
In the first section of this paper we will cover the basics of heuristics,
 genetic algorithms and genetic hybrid algorithms.
 In the second section these specific types of heuristics will be applied
 to JSP.
\end_layout

\end_body
\end_document
