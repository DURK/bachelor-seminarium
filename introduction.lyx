#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
The job shop problem (JSP) is one of the hardest combinatorial optimalisation
 problems
\begin_inset CommandInset citation
LatexCommand cite
key "Vaessens-Aarts-Lenstra-1996"

\end_inset

.
 In optimalisation problem the best solution has to be found from all possible
 problems.
 Combinatorial optimalisation problems like JSP are optimalisation problems
 with discreet variables.
 Here we are looking for a pernutation from a finite set of solutions.
\end_layout

\begin_layout Standard
The problem belongs to the set of NP-hard problems, which means that the
 exact method does not exist which calculates an optimal solution within
 polynomial time for an arbitrary instance of JSP and has also proven to
 be computationally challenging.
\end_layout

\begin_layout Standard
A specific variant of JSP with 10 jobs and 10 operations is known as the
 10x10 benchmark problem and was proposed by Muth and Thompson in 1963 and
 could not be solved for over 20 years.
\begin_inset CommandInset citation
LatexCommand cite
key "Fisher63probabilisticlearning"

\end_inset

 The first proven optimal solution was developed with exact algorithms by
 Carlier in 1987.
\begin_inset CommandInset citation
LatexCommand cite
key "carlier-pinson"

\end_inset

 15x15 problems are still considered to be unsolvable with exact methods.
\end_layout

\begin_layout Standard
The problem was solved using a branch and bound algorithm (BB).
 BB algorithm is an exact algorithm that will enumerate all likely solutions
 in the solution space.
 Searching the complete solution space would be impossible and therefore
 the algorithm will constantly split up the space (add boundaries) and discard
 solutions that are not possible.
\end_layout

\begin_layout Standard
Using BB is just one way of solving the problem.
 Although this algorithm is proven to produce the optimal solution of the
 10x10 benchmark problem, scientists are still looking for better (heuristic)
 solutions for the complete JSP.
 Doing so will solve this problem faster with less use of memory or give
 more certainty about how optimal is the answer.
 JSP is an NP-hard problem what means that there is no algorithm which solves
 JSP in polynomial time.
 Because of that we need heuristic algorithms that solve the problem.
 During the last century a lot of heuristics algorithms have been developed
 and some of them have proven to be very successful.
 This paper will discuss solutions that have been found for solving JSP
 using genetic algorithms and local search because these two technologies
 have proven to be very successful with hard combinatorial optimalisation
 problems in the past.
\begin_inset CommandInset citation
LatexCommand cite
key "Vaessens-Aarts-Lenstra-1996"

\end_inset


\end_layout

\begin_layout Standard
The paper will cover the basics of heuristics and specifically for genetic
 algorithms, local search and the combination of the two in the first section.
 In the second section these heuristics are applied to the job shop problem.
 
\end_layout

\end_body
\end_document
